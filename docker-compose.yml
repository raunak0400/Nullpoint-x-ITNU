version: '3.8'

services:
  # Backend API Service
  backend:
    build: 
      context: ./Backend
      dockerfile: Dockerfile
    container_name: null-point-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/air_quality
      - REDIS_URL=redis://redis:6379
      - NASA_USERNAME=${NASA_USERNAME}
      - NASA_PASSWORD=${NASA_PASSWORD}
      - NASA_API_KEY=${NASA_API_KEY}
      - OPENAQ_API_KEY=${OPENAQ_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=http://localhost:3001,http://frontend:3000
    depends_on:
      - mongo
      - redis
    volumes:
      - ./Backend/logs:/app/logs
    networks:
      - null-point-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js Service
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: null-point-frontend
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NEXT_PUBLIC_WS_URL=ws://localhost:5000
      - NEXT_PUBLIC_ENABLE_REAL_TIME=true
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - null-point-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: null-point-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=air_quality
    volumes:
      - mongo_data:/data/db
      - ./Backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - null-point-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: null-point-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    networks:
      - null-point-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: null-point-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - null-point-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus
    container_name: null-point-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - null-point-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana
    container_name: null-point-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - null-point-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  null-point-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
